slip no:-12
Q 1. Implement a Binary search tree (BST) library (btree.h) with operations â€“ create, insert, 
preorder. Write a menu driven program that performs the above operations.

#ifndef BTREE_H
#define BTREE_H

typedef struct node {
    int data;
    struct node* left;
    struct node* right;
} Node;

Node* create_node(int data);
Node* insert(Node* root, int data);
void preorder(Node* root);

#include <stdio.h>
#include <stdlib.h>
#include "btree.h"

Node* create_node(int data) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->data = data;
    new_node->left = NULL;
    new_node->right = NULL;
    return new_node;
}

Node* insert(Node* root, int data) {
    if (root == NULL) {
        root = create_node(data);
    } else if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}

void preorder(Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
#include <stdio.h>
#include <stdlib.h>
#include "btree.h"

int main() {
    Node* root = NULL;
    int choice, data;
    do {
        printf("\nBinary Search Tree Operations:\n");
        printf("1. Insert\n");
        printf("2. Preorder Traversal\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                root = insert(root, data);
                printf("%d inserted successfully.\n", data);
                break;
            case 2:
                if (root == NULL) {
                    printf("Tree is empty.\n");
                } else {
                    printf("Preorder Traversal: ");
                    preorder(root);
                    printf("\n");
                }
                break;
            case 3:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 3);

    return 0;
}


Q 2. Write a C program for the implementation of Topological sorting.

#include<stdio.h>
#include<stdlib.h>
#define MAX 100

int adj[MAX][MAX], visited[MAX], sorted[MAX], n, top=-1;

void dfs(int v) 
{
    visited[v] = 1;
    for(int i=0;i<n;i++) 
    {
        if(adj[v][i] && !visited[i])
            dfs(i);
    }
    sorted[++top] = v;
}

void topological_sort() 
{
    for(int i=0;i<n;i++) 
    {
        visited[i] = 0;
    }
    for(int i=0;i<n;i++) 
    {
        if(!visited[i])
            dfs(i);
    }
    printf("\nTopologically sorted order: ");
    for(int i=top;i>=0;i--)
     {
        printf("%d ", sorted[i]);
    }
}

int main()
 {
    int e, origin, dest,i,j;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &e);
    for(int i=0;i<e;i++)
     {
        printf("Enter origin and destination vertex of edge %d: ", i+1);
        scanf("%d %d", &origin, &dest);
        adj[origin][dest] = 1;
    }
    printf("Adjacency Matrix:\n");
    for( i=0;i<n;i++)
     {
        for(j=0;j<n;j++)
         {
            printf("%d ", adj[i][j]);
        }
        printf("\n");
    }
    topological_sort();
    return 0;
}
