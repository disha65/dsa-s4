slip no-:8
Q 1. Write a program to sort n randomly generated elements using Heapsort method.

#include <stdio.h>
#include <stdlib.h>
void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void heap_sort(int arr[], int n) {
    int i;
    for (i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (i = n - 1; i >= 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);
    }
}

int main() {
    int n, i;
    printf("Enter the number of elements to be sorted: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    heap_sort(arr, n);
    printf("Sorted array:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
}


Q 2. Write a C program for the Implementation of Primâ€™s Minimum spanning tree algorithm.

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define V 5  
int minKey(int key[], int mstSet[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}
void printMST(int parent[], int graph[V][V]) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}
void primMST(int graph[V][V]) {
    int parent[V];     
    int key[V];        
    int mstSet[V];     
    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
    }
    key[0] = 0;
    parent[0] = -1;
    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);
        mstSet[u] = 1;
        for (int v = 0; v < V; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }
    printMST(parent, graph);
}

int main() {
    int graph[V][V] = {{0, 2, 0, 6, 0},
                       {2, 0, 3, 8, 5},
                       {0, 3, 0, 0, 7},
                       {6, 8, 0, 0, 9},
                       {0, 5, 7, 9, 0}};
    primMST(graph);
    return 0;
}
OR

Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an 
adjacency matrix. Implement functions to print indegree of all vertices of graph. 

#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTICES 100
typedef struct {
    int matrix[MAX_VERTICES][MAX_VERTICES];
    int num_vertices;
} Graph;
Graph createGraph(int n) {
    Graph g;
    g.num_vertices = n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            g.matrix[i][j] = 0;
        }
    }
    return g;
}
void addEdge(Graph* g, int from, int to) {
    g->matrix[from][to] = 1;
}
void printGraph(Graph g) {
    printf("Adjacency matrix:\n");
    for (int i = 0; i < g.num_vertices; i++) {
        for (int j = 0; j < g.num_vertices; j++) {
            printf("%d ", g.matrix[i][j]);
        }
        printf("\n");
    }
}
void printIndegree(Graph g) {
    int indegree[MAX_VERTICES] = {0};
    for (int i = 0; i < g.num_vertices; i++) {
        for (int j = 0; j < g.num_vertices; j++) {
            if (g.matrix[j][i] == 1) {
                indegree[i]++;
            }
        }
    }
    printf("Indegree of vertices:\n");
    for (int i = 0; i < g.num_vertices; i++) {
        printf("%d: %d\n", i, indegree[i]);
    }
}

int main() {
    Graph g = createGraph(6);
    addEdge(&g, 0, 1);
    addEdge(&g, 0, 3);
    addEdge(&g, 1, 2);
    addEdge(&g, 1, 4);
    addEdge(&g, 2, 5);
    addEdge(&g, 3, 1);
    addEdge(&g, 4, 2);
    addEdge(&g, 4, 3);
    addEdge(&g, 5, 4);
    printGraph(g);
    printIndegree(g);

    return 0;
}


