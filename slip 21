slip no:-21

Q 1. Write a C program for the implementation of Dijkstra’s shortest path algorithm for 
findingshortest path from a given source vertex using adjacency cost matrix.

#include <stdio.h>
#include <limits.h>
#define V 5
int minDistance(int dist[], int visited[])
{
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
        if (visited[v] == 0 && dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}
void printSolution(int dist[])
{
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d \t\t %d\n", i, dist[i]);
} 
void dijkstra(int graph[V][V], int src)
{
    int dist[V];   
    int visited[V]; 
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, visited[i] = 0;
    dist[src] = 0
    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);
        visited[u] = 1;
        for (int v = 0; v < V; v++)
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }
    printSolution(dist);
}
int main()
{
    int graph[V][V] = { { 0, 4, 0, 0, 2 },
                        { 4, 0, 1, 0, 0 },
                        { 0, 1, 0, 3, 0 },
                        { 0, 0, 3, 0, 1 },
                        { 2, 0, 0, 1, 0 } };
    dijkstra(graph, 0); 
    return 0;
}

Q 2. Write a C program for the Implementation of Prim’s Minimum spanning tree algorithm.

#include <stdio.h>
#include <limits.h>
#define V 5 

int minKey(int key[], int mstSet[]) 
{
    int min = INT_MAX, min_index;
  
    for (int v = 0; v < V; v++)
        if (mstSet[v] == 0 && key[v] < min)
            min = key[v], min_index = v;
  
    return min_index;
}

void printMST(int parent[], int graph[V][V]) 
{
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}

void primMST(int graph[V][V]) 
{
    int parent[V];
    int key[V];
    int mstSet[V];
  
    for (int i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = 0;
  
    key[0] = 0;
    parent[0] = -1;
  
    for (int count = 0; count < V - 1; count++) 
    {
        int u = minKey(key, mstSet);
        mstSet[u] = 1;
  
        for (int v = 0; v < V; v++)
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }
    printMST(parent, graph);
}

int main()
 {
    int graph[V][V] = 
    {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };
      primMST(graph);
      return 0;
}
