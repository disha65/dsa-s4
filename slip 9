slip no-:9
Q 1. Write a C program that accepts the vertices and edges of a graph. Create adjacency list
and display the adjacency list.

#include <stdio.h>
#include <stdlib.h>

struct node {
    int vertex;
    struct node* next;
};

struct Graph {
    int numVertices;
    struct node** adjLists;
};

struct node* createNode(int v) {
    struct node* newNode = (struct node*) malloc(sizeof(struct node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->numVertices = vertices;

    graph->adjLists = (struct node**) malloc(vertices * sizeof(struct node*));

    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }

    return graph;
}

void addEdge(struct Graph* graph, int src, int dest) {
    struct node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

void printGraph(struct Graph* graph) {
    printf("The adjacency list of the graph is:\n");
    for (int i = 0; i < graph->numVertices; i++) {
        struct node* temp = graph->adjLists[i];
        printf("Vertex %d: ", i);
        while (temp) {
            printf("%d -> ", temp->vertex);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

int main() {
    int V, E, src, dest;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    printf("Enter the number of edges: ");
    scanf("%d", &E);

    struct Graph* graph = createGraph(V);

    printf("Enter the edges (source, destination):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    printGraph(graph);

    return 0;
}

Q 2. Implement a Binary search tree (BST) library (btree.h) with operations â€“ create, insert, 
postorder. Write a menu driven program that performs the above operations.

#include <stdio.h>
#include <stdlib.h>
typedef struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;
TreeNode* createNode(int data) {
    TreeNode* node = (TreeNode*) malloc(sizeof(TreeNode));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return node;
}
TreeNode* insert(TreeNode* root, int data) {
    if (root == NULL) {
        return createNode(data);
    } else if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}
void postorder(TreeNode* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}
TreeNode* createTree(int arr[], int n) {
    TreeNode* root = NULL;
    for (int i = 0; i < n; i++) {
        root = insert(root, arr[i]);
    }
    return root;
void displayMenu() {
    printf("\n1. Create a binary search tree\n");
    printf("2. Insert a node into the binary search tree\n");
    printf("3. Print the binary search tree in postorder\n");
    printf("4. Exit\n");
}

int main() {
    int choice, data, n, i;
    TreeNode* root = NULL;

    while (1) {
        displayMenu();
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the number of elements: ");
                scanf("%d", &n);
                int arr[n];
                printf("Enter the elements: ");
                for (i = 0; i < n; i++) {
                    scanf("%d", &arr[i]);
                }
                root = createTree(arr, n);
                printf("Binary search tree created successfully\n");
                break;

            case 2:
                printf("Enter the data to be inserted: ");
                scanf("%d", &data);
                root = insert(root, data);
                printf("%d inserted into the binary search tree\n", data);
                break;

            case 3:
                printf("The binary search tree in postorder: ");
                postorder(root);
                printf("\n");
                break;

            case 4:
                printf("Exiting the program\n");
                exit(0);

            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}

