Q 1. Implement a Binary search tree (BST) library (btree.h) with operations â€“ create, insert, 
inorder. Write a menu driven program that performs the above operations.

#include <stdio.h>
#include <stdlib.h>
struct node {
    int data;
    struct node* left;
    struct node* right;
};
struct node* create_node(int data) {
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = data;
    new_node->left = NULL;
    new_node->right = NULL;
    return new_node;
}
struct node* insert(struct node* root, int data) {
    if (root == NULL) {
        return create_node(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    }
    else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}
void inorder(struct node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}
int main() {
    struct node* root = NULL;
    int choice, data;
    do {
        printf("\n1. Insert");
        printf("\n2. Inorder Traversal");
        printf("\n3. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
        case 1:
            printf("\nEnter data to be inserted: ");
            scanf("%d", &data);
            root = insert(root, data);
            break;
        case 2:
            printf("\nInorder Traversal: ");
            inorder(root);
            printf("\n");
            break;
        case 3:
            printf("\nExiting program");
            break;
        default:
            printf("\nInvalid choice. Try again.");
        }
    } while (choice != 3);
    return 0;
}


Q 2. Write a C program that accepts the vertices and edges of a graph and store it as an
adjacencymatrix. Implement function to traverse the graph using Depth First Search (DFS)
traversal.

#include <stdio.h>
#include <stdlib.h>
void dfs(int vertex, int** graph, int* visited, int num_vertices) {
    visited[vertex] = 1;
    printf("%d ", vertex);
    int i;
    for (i = 0; i < num_vertices; i++) {
        if (graph[vertex][i] == 1 && !visited[i]) {
            dfs(i, graph, visited, num_vertices);
        }
    }
}
int main() {
    int num_vertices, num_edges, i, j;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &num_vertices);
    printf("Enter the number of edges in the graph: ");
    scanf("%d", &num_edges);
    int** graph = (int**)malloc(num_vertices * sizeof(int*));
    for (i = 0; i < num_vertices; i++) {
        graph[i] = (int*)malloc(num_vertices * sizeof(int));
        for (j = 0; j < num_vertices; j++) {
            graph[i][j] = 0;
        }
    }
    for (i = 0; i < num_edges; i++) {
        int src, dest;
        printf("\nEnter edge %d (source and destination): ", i + 1);
        scanf("%d %d", &src, &dest);
        graph[src][dest] = 1;
        graph[dest][src] = 1;  // since it is an undirected graph
    }
    printf("\nAdjacency Matrix:\n");
    for (i = 0; i < num_vertices; i++) {
        for (j = 0; j < num_vertices; j++) {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }
    int* visited = (int*)malloc(num_vertices * sizeof(int));
    for (i = 0; i < num_vertices; i++) {
        visited[i] = 0;
    }
    printf("\nDepth First Search (DFS) Traversal: ");
    for (i = 0; i < num_vertices; i++) {
        if (!visited[i]) {
            dfs(i, graph, visited, num_vertices);
        }
    }
    for (i = 0; i < num_vertices; i++) {
        free(graph[i]);
    }
    free(graph);
    free(visited);

    return 0;
}
